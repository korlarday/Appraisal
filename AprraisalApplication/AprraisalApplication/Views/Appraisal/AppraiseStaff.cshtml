@model AprraisalApplication.Models.ViewModels.AppraiseStaffVM

@{
    ViewBag.Title = "Appraise Staff";
}


@{
    ViewBag.Title = "Ongoing Appraisal";
    int columns = Model.DefaultRatings.Count() + 1;
    int dutiesAssignCol = Model.DefaultRatings.Count() + 2;
    int ratingsCount = Model.DefaultRatings.Count();
    var sectionResult = Model.Appraisee.SectionResults;
    var highestRating = Model.DefaultRatings.OrderByDescending(x => x.Score).FirstOrDefault();
}

@section Stylesheet{
    <style>
        #content-body {
            max-width: 1000px;
            margin: 20px auto;
            background-color: white;
            padding: 50px;
        }

        .table-bordered td, .table-bordered th {
            border: 1px solid grey;
        }

        .table thead th {
            border-bottom: 1px solid grey;
        }

        .titles {
            font-weight: bold;
        }

        .details {
            font-size: 14px;
        }

        .text-header {
            text-decoration: underline;
            text-transform: uppercase;
        }
        td.task-performed-rate:hover{
            cursor:pointer;
            background-color:antiquewhite;
        }
        td.qualitative-rate:hover {
            cursor: pointer;
            background-color: antiquewhite;
        }
        td.duties-assigned:hover {
            cursor: pointer;
            background-color: antiquewhite;
        }
        td.check{
            background: url('@Url.Content("~/Images/checkmark.png")') center center no-repeat;
            background-size: 25px;
        }
        .score{
            border-bottom: 1px solid black;
            text-align: center;
        }
        .enter-score{
            font-size: 20px;
            font-weight:bold;
        }
        
    </style>
}

<!-- Hero -->
<div class="bg-body-light">
    <div class="content content-full">
        <div class="d-flex flex-column flex-sm-row justify-content-sm-between align-items-sm-center">
            <h1 class="flex-sm-fill font-size-h2 font-w400 mt-2 mb-0 mb-sm-2">Appraisal</h1>
            <nav class="flex-sm-00-auto ml-sm-3" aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">Home</li>
                    <li class="breadcrumb-item">Appraisal</li>
                    <li class="breadcrumb-item active" aria-current="page">Appraisal</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<!-- END Hero -->
<!-- Page Content -->
<div class="content">
    <a class="btn btn-link btn-sm mb-2" href="@Url.Action("appraise-members", "appraisal")"><i class="fa fa-arrow-left"></i> Back</a>
    <!-- Elements -->
    <div class="block block-rounded block-bordered">
        <div class="block-header block-header-default">
            <h3 class="block-title">Appraise Team Member</h3>
        </div>
        <div class="block-content">
            <div class="block block-rounded">
                <div class="block-content block-content-full">
                    <span style="display:none" id="appraiseeId">@Model.Appraisee.Id</span>
                    <span style="display:none" id="highestRating">@highestRating.Score</span>
                    <span style="display:none" id="includeTracker">@Model.InitiatedAppraisalTemplate.IncludeBdsTracker</span>
                    <div class="row">
                        <h6 class="col-12 text-header">Personal Data: Appraisee</h6>
                        <div class="col-md-6 details">
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Name of Employee: </div>
                                    <div class="col-6">@Model.Employee.Firstname @Model.Employee.Lastname</div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Date of Employment: </div>
                                    <div class="col-6">@Model.Employee.DateOfEmployment.ToString("dd-MMM-yyyy")</div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Grade: </div>
                                    <div class="col-6 capitalize-text">@Model.Employee.Grade.Name</div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <span class="col-6 titles">Appraisal Period: </span>
                                    <span class="col-6">
                                        @Model.NewAppraisal.AppraisalPeriodStartDate.ToString("MMM-yyyy")
                                        To
                                        @Model.NewAppraisal.AppraisalPeriodEndDate.ToString("MMM-yyyy")
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 details">
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Department: </div>
                                    <div class="col-6 capitalize-text">@Model.Employee.Department.Name</div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Location: </div>
                                    <div class="col-6 capitalize-text">@Model.Employee.State.Description</div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Date of Last Promotion: </div>
                                    <div class="col-6">
                                        @if (Model.Employee.DateOfLastPromotion != null)
                                        {
                                            @Model.Employee.DateOfLastPromotion.Value.ToString("dd-MMM-yyyy")
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Qualifications: </div>
                                    <div class="col-6 capitalize-text">
                                        @foreach (var item in Model.Employee.EmployeeQualifications)
                                        {
                                            <span>@item.Qualification.Name, </span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-5">
                        <h6 class="col-12 text-header">Personal Data: Appraiser</h6>
                        <div class="col-md-6 details">
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Appraiser's Name: </div>
                                    <div class="col-6">
                                        @Model.Appraisee.AppraiserPersonalData.Appraiser.Firstname
                                        @Model.Appraisee.AppraiserPersonalData.Appraiser.Lastname
                                    </div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Grade: </div>
                                    <div class="col-6 capitalize-text">@Model.Appraisee.AppraiserPersonalData.Appraiser.Grade.Name</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 details">
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Job Title: </div>
                                    <div class="col-6 capitalize-text">@Model.Appraisee.AppraiserPersonalData.JobTitle.Name</div>
                                </div>
                            </div>
                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-6 titles">Department: </div>
                                    <div class="col-6 capitalize-text">@Model.Appraisee.AppraiserPersonalData.Appraiser.Department.Name</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <h6 class="mt-4 text-header mt-5">Career history with the company</h6>
                        <div class="table-responsive mb-4 details">
                            <table class="table table-bordered table-vcenter">
                                <thead>
                                    <tr>
                                        <th style="width:40px;">S/N</th>
                                        <th style="width:110px">Date</th>
                                        <th style="width:150px">Department/Unit</th>
                                        <th style="width:130px">Grade</th>
                                        <th>Trainings Attended</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int num = 1;
                                        foreach (var training in Model.Appraisee.AppraiseeCareerHistoryWithCompanies.OrderByDescending(x => x.Date))
                                        {
                                            <tr>
                                                <th class="text-center">@num</th>
                                                <td>@training.Date.ToString("dd MMM yyyy")</td>
                                                <td class="capitalize-text">@training.Department.Name</td>
                                                <td class="capitalize-text">@training.Grade.Name</td>
                                                <td>@training.TrainingAttended</td>
                                            </tr>
                                            ++num;
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    @foreach (var templateSection in Model.InitiatedAppraisalTemplate.InitiatedTemplateSections.OrderBy(x => x.SetupId))
                    {
                        if (templateSection.IsDeleted == false)
                        {
                            var currentResultSection = sectionResult.Where(x => x.InitiatedTemplateSectionId == templateSection.Id).SingleOrDefault();
                            if (templateSection.SectionTypeId == 1)
                            {
                                <div class="section-item"
                                     data-sectionTypeId="1"
                                     data-sectionId="@currentResultSection.Id"
                                     data-percentageScore="@templateSection.TotalPercentageObtainable"
                                     data-obtainableScore="@templateSection.TotalMarkObtainable"
                                     data-optionalSection="@templateSection.Optional"
                                     data-sectionSetupId="@templateSection.SetupId"
                                     data-parentSectionSetupId="@templateSection.DerivedSectionSetupId">

                                    <h5 class="mt-4">Section @templateSection.SetupId</h5>
                                    <div class="table-responsive mb-4 details">
                                        <span style="display:none" class="sectionFilled">@currentResultSection.SectionFilled</span>
                                        <table class="table table-bordered table-vcenter">
                                            <thead>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th rowspan="2" colspan="@columns">
                                                        <div class="font-size-h5 text-center">@templateSection.SectionTitle</div>
                                                        <div>@templateSection.SectionInstructions</div>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th class="text-center text-uppercase" style="width:70%;" scope="row">
                                                        @((templateSection.FirstColumnHeader != "")? templateSection.FirstColumnHeader: "tasks performed")
                                                    </th>
                                                    <th class="text-uppercase text-center" colspan="@ratingsCount">ratings</th>
                                                </tr>
                                                <tr>
                                                    <th class="text-center text-uppercase" scope="row"></th>
                                                    @foreach (var item in Model.DefaultRatings)
                                                    {
                                                        <th class="text-center">@item.Score</th>
                                                    }
                                                </tr>
                                                @foreach (var sectionDetail in currentResultSection.SectionDetailResults.OrderBy(x => x.Number))
                                                {
                                                    <tr class="task-row" data-sectionResultDetailId="@sectionDetail.Id">
                                                        <td class="pr-5">
                                                            <div class="row p-1">
                                                                <span class="col-1 count" style="">@sectionDetail.Number.</span>
                                                                <span>@sectionDetail.Title1</span>
                                                                @*<button style="display:none" class="btn btn-link text-danger col-1 delete-row" data-toggle="tooltip" title="Delete Row"><i class="fa fa-times"></i></button>*@
                                                            </div>
                                                        </td>
                                                        @foreach (var item in Model.DefaultRatings)
                                                        {
                                                            if (templateSection.Optional)
                                                            {
                                                                <td class="@(currentResultSection.SectionFilled == true ? "task-performed-rate":"")" data-rateScore="@item.Score"></td>
                                                            }
                                                            else
                                                            {
                                                                <td class="task-performed-rate" data-rateScore="@item.Score"></td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="row score-section">
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-4">Total Score:</div>
                                                <div class="col-2 totalScore score"></div>/
                                                <div class="col-2 score">@templateSection.TotalMarkObtainable</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-5">Percentage Score:</div>
                                                <div class="col-2 percentageScore score"></div>/
                                                @{
                                                    var sectionPercentage = templateSection.TotalPercentageObtainable;
                                                    var templateSectionSetupId = templateSection.SetupId;
                                                    var childSection = Model.InitiatedAppraisalTemplate.InitiatedTemplateSections
                                                                        .Where(x => x.IsDeleted == false &&
                                                                                x.DerivedSectionSetupId == templateSectionSetupId)
                                                                        .FirstOrDefault();
                                                    if (childSection != null)
                                                    {
                                                        var childResult = sectionResult.Where(x => x.InitiatedTemplateSectionId == childSection.Id).SingleOrDefault();
                                                        if (childResult.SectionFilled)
                                                        {
                                                            sectionPercentage = templateSection.TotalPercentageObtainable - childSection.TotalPercentageObtainable;
                                                        }
                                                    }
                                                }
                                                <div class="col-2 score percentageObtainable">@sectionPercentage %</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            }
                            else if (templateSection.SectionTypeId == 2)
                            {
                                <div class="section-item"
                                     data-sectionTypeId="2"
                                     data-sectionId="@currentResultSection.Id"
                                     data-percentageScore="@templateSection.TotalPercentageObtainable"
                                     data-obtainableScore="@templateSection.TotalMarkObtainable"
                                     data-optionalSection="@templateSection.Optional"
                                     data-sectionSetupId="@templateSection.SetupId"
                                     data-parentSectionSetupId="@templateSection.DerivedSectionSetupId">
                                    <h5 class="mt-4">Section @templateSection.SetupId</h5>
                                    <div class="table-responsive mb-4">
                                        <span style="display:none" class="sectionFilled">@currentResultSection.SectionFilled</span>
                                        <table class="table table-bordered table-vcenter">
                                            <thead>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th rowspan="2" colspan="@dutiesAssignCol">
                                                        <div class="font-size-h5 text-center">@templateSection.SectionTitle</div>
                                                        <div>@templateSection.SectionInstructions</div>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th class="text-center text-uppercase" style="width:35%;">
                                                        @((templateSection.FirstColumnHeader != "")? templateSection.FirstColumnHeader: "duties assigned")
                                                    </th>
                                                    <th class="text-center text-uppercase" style="width: 35%;">
                                                        @((templateSection.SecondColumnHeader != "")? templateSection.SecondColumnHeader: "actual results achieved")
                                                    </th>
                                                    <th class="text-uppercase text-center" colspan="@ratingsCount">ratings</th>
                                                </tr>
                                                <tr>
                                                    <th class="text-center text-uppercase" scope="row"></th>
                                                    <th class="text-center text-uppercase" scope="row"></th>
                                                    @foreach (var item in Model.DefaultRatings)
                                                    {
                                                        <th class="text-center">@item.Score</th>
                                                    }
                                                </tr>
                                                @foreach (var sectionDetail in currentResultSection.SectionDetailResults.OrderBy(x => x.Number))
                                                {
                                                    <tr class="task-row" data-sectionResultDetailId="@sectionDetail.Id">
                                                        <td>
                                                            <div class="row p-1">
                                                                <span class="col-1 count mr-2">@sectionDetail.Number.</span>
                                                                <span>@sectionDetail.Title1</span>
                                                            </div>
                                                        </td>
                                                        <td class="pl-4">
                                                            <div class="row">
                                                                <input type="text" value="@sectionDetail.Title2" class="form-control col-10 resultAchieved" style="display:inline !important" />
                                                            </div>
                                                        </td>
                                                        @foreach (var item in Model.DefaultRatings)
                                                        {
                                                            if (templateSection.Optional)
                                                            {
                                                                <td class="@(currentResultSection.SectionFilled == true ? "duties-assigned":"")" data-rateScore="@item.Score"></td>
                                                            }
                                                            else
                                                            {
                                                                <td class="duties-assigned" data-rateScore="@item.Score"></td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="row score-section">
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-4">Total Score:</div>
                                                <div class="col-2 totalScore score"></div>/
                                                <div class="col-2 score">@templateSection.TotalMarkObtainable</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-5">Percentage Score:</div>
                                                <div class="col-2 percentageScore score"></div>/
                                                @{
                                                    var sectionPercentage = templateSection.TotalPercentageObtainable;
                                                    var templateSectionSetupId = templateSection.SetupId;
                                                    var childSection = Model.InitiatedAppraisalTemplate.InitiatedTemplateSections
                                                                        .Where(x => x.IsDeleted == false &&
                                                                                x.DerivedSectionSetupId == templateSectionSetupId)
                                                                        .FirstOrDefault();
                                                    if (childSection != null)
                                                    {
                                                        var childResult = sectionResult.Where(x => x.InitiatedTemplateSectionId == childSection.Id).SingleOrDefault();
                                                        if (childResult.SectionFilled)
                                                        {
                                                            sectionPercentage = templateSection.TotalPercentageObtainable - childSection.TotalPercentageObtainable;
                                                        }
                                                    }
                                                }
                                                <div class="col-2 score percentageObtainable">@sectionPercentage %</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <hr />
                            }
                            else if (templateSection.SectionTypeId == 3)
                            {
                                <div class="section-item"
                                     data-sectionTypeId="3"
                                     data-sectionId="@currentResultSection.Id"
                                     data-percentageScore="@templateSection.TotalPercentageObtainable"
                                     data-obtainableScore="@templateSection.TotalMarkObtainable"
                                     data-optionalSection="@templateSection.Optional"
                                     data-sectionSetupId="@templateSection.SetupId"
                                     data-parentSectionSetupId="@templateSection.DerivedSectionSetupId">

                                    <h5 class="mt-4">Section @templateSection.SetupId</h5>
                                    <div class="table-responsive mb-4">
                                        <span class="breakdown-value" style="display:none">@templateSection.BreakdownValueBy</span>
                                        <span style="display:none" class="sectionFilled">@currentResultSection.SectionFilled</span>
                                        <table class="table table-bordered table-vcenter">
                                            <thead>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th rowspan="2" colspan="4">
                                                        <div class="font-size-h5 text-center">@templateSection.SectionTitle</div>
                                                        <div>@templateSection.SectionInstructions</div>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th>S/N</th>
                                                    <th class="text-center text-uppercase" style="width:70%;" scope="row">
                                                        @((templateSection.FirstColumnHeader != "")? templateSection.FirstColumnHeader: "values")
                                                    </th>
                                                    <th class="text-center">MAX SCORE</th>
                                                    <th class="text-uppercase text-center">MARK OBTAINED</th>
                                                </tr>
                                                @{
                                                    int count = 1;
                                                    foreach (var detail in templateSection.InitiatedSectionDetails)
                                                    {
                                                        var detailResult = currentResultSection.SectionDetailResults.Where(x => x.SectionDetailId == detail.Id).SingleOrDefault();
                                                        <tr class="quantitative-values" data-sectionResultDetailId="@detailResult.Id">
                                                            <td>@count</td>
                                                            <td data-sectionDetailId="@detail.Id" class="section-detail">
                                                                <span class="detail-title">@detail.Title1</span>
                                                                <div style="overflow:hidden">
                                                                    <div class="font-size-sm" style="float:right;width:30%">max score</div>
                                                                </div>
                                                                <div>
                                                                    <ul>
                                                                        @foreach (var breakdown in detail.InitiatedSectionDetailBreakdowns)
                                                                        {
                                                                            var result = detailResult.ItemBreakdownResults.Where(x => x.InitiatedSectionDetailBreakdownId == breakdown.Id).SingleOrDefault();
                                                                            <li class="mt-1" style="overflow:hidden;" data-isScore="@breakdown.IsScore" data-expectedValue="@breakdown.ExpectedValueId">
                                                                                <div style="float:left;width:70%;overflow-wrap:normal">
                                                                                    <span class="breakdown-title">@breakdown.Title</span>
                                                                                    @if (templateSection.Optional)
                                                                                    {
                                                                                        <input type="number" data-breakdownId="@result.Id" value="@result.Value" class="form-control ml-4 input-breakdown" style="width:120px;@(breakdown.ExpectedValueId == 3 ? "display:none":"display:inline;")" @(currentResultSection.SectionFilled == false ? "disabled" : "") />
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <input type="number" data-breakdownId="@result.Id" value="@result.Value" class="form-control ml-4 input-breakdown" style="width:120px;@(breakdown.ExpectedValueId == 3 ? "display:none":"display:inline;")" />
                                                                                    }
                                                                                </div>
                                                                                @if (breakdown.IsScore)
                                                                                {
                                                                                    <div style="float:right;width:30%;">
                                                                                        <span class="mr-2 badge badge-info breakdown-max-score">@breakdown.MaxScore</span>
                                                                                        <input style="width:100px;display:inline" type="number" class="form-control breakdown-score" placeholder="Score" />
                                                                                    </div>
                                                                                }
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </td>
                                                            <td class="text-center max-score">@detail.MaxScore</td>
                                                            <td>
                                                                <div class="enter-score text-center">0</div>
                                                            </td>
                                                        </tr>
                                                        ++count;
                                                    }
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td class="text-right font-w700" colspan="2">Mark Obtainable</td>
                                                    <td class="text-center font-w700">@templateSection.TotalMarkObtainable</td>
                                                    <td colspan="@ratingsCount" class="text-center font-w700"></td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row score-section">
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-4">Total Score:</div>
                                                <div class="col-2 totalScore score"></div>/
                                                <div class="col-2 score">@templateSection.TotalMarkObtainable</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-5">Percentage Score:</div>
                                                <div class="col-2 percentageScore score"></div>/
                                                @{
                                                    var sectionPercentage = templateSection.TotalPercentageObtainable;
                                                    var templateSectionSetupId = templateSection.SetupId;
                                                    var childSection = Model.InitiatedAppraisalTemplate.InitiatedTemplateSections
                                                                        .Where(x => x.IsDeleted == false &&
                                                                                x.DerivedSectionSetupId == templateSectionSetupId)
                                                                        .FirstOrDefault();
                                                    if (childSection != null)
                                                    {
                                                        var childResult = sectionResult.Where(x => x.InitiatedTemplateSectionId == childSection.Id).SingleOrDefault();
                                                        if (childResult.SectionFilled)
                                                        {
                                                            sectionPercentage = templateSection.TotalPercentageObtainable - childSection.TotalPercentageObtainable;
                                                        }
                                                    }
                                                }
                                                <div class="col-2 score percentageObtainable">@sectionPercentage %</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            }
                            else if (templateSection.SectionTypeId == 4)
                            {
                                <div class="section-item"
                                     data-sectionTypeId="4"
                                     data-sectionId="@currentResultSection.Id"
                                     data-percentageScore="@templateSection.TotalPercentageObtainable"
                                     data-obtainableScore="@templateSection.TotalMarkObtainable"
                                     data-optionalSection="@templateSection.Optional"
                                     data-sectionSetupId="@templateSection.SetupId"
                                     data-parentSectionSetupId="@templateSection.DerivedSectionSetupId">
                                    <h5 class="mt-4">Section @templateSection.SetupId</h5>
                                    <div class="table-responsive mb-4">
                                        <span style="display:none" class="sectionFilled">@currentResultSection.SectionFilled</span>
                                        <table class="table table-bordered table-vcenter">
                                            <thead>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th rowspan="2" colspan="@dutiesAssignCol">
                                                        <div class="font-size-h5 text-center">@templateSection.SectionTitle</div>
                                                        <div>@templateSection.SectionInstructions</div>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr style="background-color:#e5e6e6;">
                                                    <th class="text-center text-uppercase" style="width:65%;" scope="row">
                                                        @((templateSection.FirstColumnHeader != "")? templateSection.FirstColumnHeader: "values")
                                                    </th>
                                                    <th class="text-center" style="width:70px">Weight</th>
                                                    <th class="text-uppercase text-center" colspan="@ratingsCount">ratings</th>
                                                </tr>
                                                <tr>
                                                    <th scope="row"></th>
                                                    <td></td>
                                                    @foreach (var item in Model.DefaultRatings)
                                                    {
                                                        <th class="text-center">@item.Score</th>
                                                    }
                                                </tr>
                                                @foreach (var detail in templateSection.InitiatedSectionDetails)
                                                {
                                                    var sectionDetailResult = currentResultSection.SectionDetailResults.Where(x => x.SectionDetailId == detail.Id).SingleOrDefault();
                                                    <tr class="task-row" data-sectionResultDetailId="@sectionDetailResult.Id">
                                                        <td>@detail.Title1</td>
                                                        <td class="text-center">@detail.MaxScore</td>
                                                        @foreach (var item in Model.DefaultRatings)
                                                        {
                                                            if (templateSection.Optional)
                                                            {
                                                                <td class="@(currentResultSection.SectionFilled == true ? "qualitative-rate": "")" data-rateScore="@item.Score"></td>
                                                            }
                                                            else
                                                            {
                                                                <td class="qualitative-rate" data-rateScore="@item.Score"></td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td class="text-right font-w700">Mark Obtainable</td>
                                                    <td class="text-center font-w700">@templateSection.TotalMarkObtainable</td>
                                                    <td colspan="@ratingsCount" class="text-center font-w700"></td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row score-section">
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-4">Total Score:</div>
                                                <div class="col-2 totalScore score"></div>/
                                                <div class="col-2 score">@templateSection.TotalMarkObtainable</div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="row">
                                                <div class="col-5">Percentage Score:</div>
                                                <div class="col-2 percentageScore score"></div>/
                                                @{
                                                    var sectionPercentage = templateSection.TotalPercentageObtainable;
                                                    var templateSectionSetupId = templateSection.SetupId;
                                                    var childSection = Model.InitiatedAppraisalTemplate.InitiatedTemplateSections
                                                                        .Where(x => x.IsDeleted == false &&
                                                                                x.DerivedSectionSetupId == templateSectionSetupId)
                                                                        .FirstOrDefault();
                                                    if (childSection != null)
                                                    {
                                                        var childResult = sectionResult.Where(x => x.InitiatedTemplateSectionId == childSection.Id).SingleOrDefault();
                                                        if (childResult.SectionFilled)
                                                        {
                                                            sectionPercentage = templateSection.TotalPercentageObtainable - childSection.TotalPercentageObtainable;
                                                        }
                                                    }
                                                }
                                                <div class="col-2 score percentageObtainable">@sectionPercentage %</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            }
                        }
                    }

                    @if (Model.InitiatedAppraisalTemplate.IncludeBdsTracker)
                    {
                        <div class="row mt-5" id="trackerSection">
                            <div class="table-responsive">
                                <table class="table table-bordered table-vcenter">
                                    <thead>
                                        <tr>
                                            <th class="text-center">Annual Target</th>
                                            <th class="text-center"><div>Expected RSA</div><span style="font-size:14px">(@Model.NewAppraisal.AppraisalPeriodStartDate.ToString("MMM") - @Model.NewAppraisal.AppraisalPeriodEndDate.ToString("MMM"))</span></th>
                                            <th class="text-center">RSA Achieved</th>
                                            <th class="text-center">Funded Pin <span style="font-size:14px">(@Model.NewAppraisal.AppraisalPeriodEndDate.ToString("yyyy") REG)</span></th>
                                            <th class="text-center">Pre-@Model.NewAppraisal.AppraisalPeriodStartDate.ToString("yyyy") Funded Pins</th>
                                            <th class="text-center">Cash Volume</th>
                                            <th class="text-center">Unfunded Accounts</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td style="height:70px"><input value="@Model.BdsTracker.AnnualTarget" type="text" class="form-control annual-target" /></td>
                                            <td><input value="@Model.BdsTracker.ExpectedRSA" type="text" class="form-control expected-rsa" /></td>
                                            <td><input value="@Model.BdsTracker.RSAAchieved" type="text" class="form-control rsa-achieved" /></td>
                                            <td><input value="@Model.BdsTracker.FundedPins" type="text" class="form-control funded-pins" /></td>
                                            <td><input value="@Model.BdsTracker.PreFundedPins" type="text" class="form-control pre-funded-pins" /></td>
                                            <td style="width:150px"><input value="@Model.BdsTracker.CashVolume" type="text" class="form-control cash-volume" /></td>
                                            <td><input type="text" class="form-control unfunded-accounts" /></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="row" id="trackerScore">
                            <div class="table-responsive col-6">
                                <table class="table table-bordered table-vcenter">
                                    <thead>
                                        <tr>
                                            <th class="text-center">% RSA Achieved</th>
                                            <th class="text-center">% Funding Achieved</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td style="height:50px" class="rsa-achieved-percentage text-center"></td>
                                            <td class="funding-achieved-percentage text-center"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }


                    <button class="btn btn-secondary btn-sm mt-5" id="calculateScore">Calculate Score</button>
                    <div class="row" id="scoreDiv" style="display:none;">
                        <div class="offset-2 col-8 p-5 my-5" style="border: 1px solid grey">
                            <div class="row">
                                <div class="table-responsive">
                                    <table id="sectionScoreTable" class="table table-bordered table-vcenter">
                                        <thead>
                                            <tr>
                                                <th>Section</th>
                                                <th>Percentage Obtainable</th>
                                                <th>Score</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr style="display:none;">
                                                <td class="section-name">Section 1</td>
                                                <td class="section-percentage">35</td>
                                                <td class="section-score">50</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="row">
                                <div class="offset-3 col-4 font-weight-bolder">Final Score:</div>
                                <div class="col-2 finalScore score font-weight-bolder">%</div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div style="margin:auto">
                            <button class="btn btn-primary mr-4" id="submitAppraisal">
                                Submit Appraisal
                            </button>
                            <button class="btn btn-danger" id="rejectAppraisal">
                                Reject Appraisal
                            </button>
                        </div>
                    </div>
                    <div id="rejection-div" style="display:none;">
                        <div class="row mt-5">
                            <h5 class="col-12 text-center">Rejection Reason</h5>
                            <div class="col-12">
                                <textarea class="form-control" id="rejectionReasonText" rows="5" style="width:400px;margin:auto"></textarea>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div style="margin:auto">
                                <button class="btn btn-danger mr-4" id="submitReject">
                                    Submit
                                </button>
                                <button class="btn btn-primary mr-4" id="cancelReject">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- END Elements -->
</div>


@section Scripts {

    <script>
        $(function () {
            var $texts = $(".capitalize-text");
            $.each($texts, function () {
                $(this).text(capitalize($(this).text()));
            })
            function capitalize(text) {
                return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();
            }

            // ratings for task performed
            $("table").on("click", "td.task-performed-rate", function () {
                var $this = $(this);
                $this.closest("tr").find(".check").removeClass("check");
                $this.addClass("check");
                var $sectionDiv = $this.closest(".section-item");
                var $obtainableScore = parseInt($sectionDiv.attr("data-obtainableScore"));
                var $percentageScore = parseInt($sectionDiv.find(".score-section .percentageObtainable").text().replace(" %", ""));
                var $highestScore = parseInt($("#highestRating").text());
                var $table = $this.closest("table");
                var $rows = $table.find(".task-row");
                var $totalItemScores = 0;
                var $totalPossibleScore = 0;
                $.each($rows, function () {
                    $totalPossibleScore += $highestScore;
                    var $itemScore = parseInt($(this).find(".check").attr("data-rateScore"));
                    console.log($itemScore);
                    if (isNaN($itemScore)) {
                        $itemScore = 0;
                    }
                    $totalItemScores += $itemScore;
                });
                var $sectionScore = (($totalItemScores / $totalPossibleScore) * $obtainableScore).toFixed(1);
                var $sectionPercentageScore = (($sectionScore / $obtainableScore) * $percentageScore).toFixed(1);
                $sectionDiv.find(".totalScore").text($sectionScore);
                $sectionDiv.find(".percentageScore").text($sectionPercentageScore);
            });

            // ratings for qualititative
            $("table").on("click", "td.qualitative-rate", function () {
                var $this = $(this);
                $this.closest("tr").find(".check").removeClass("check");
                $this.addClass("check");
                var $sectionDiv = $this.closest(".section-item");
                var $obtainableScore = parseInt($sectionDiv.attr("data-obtainableScore"));
                var $percentageScore = parseInt($sectionDiv.find(".score-section .percentageObtainable").text().replace(" %", ""));
                var $highestScore = parseInt($("#highestRating").text());
                var $table = $this.closest("table");
                var $rows = $table.find(".task-row");
                var $totalItemScores = 0;
                var $totalPossibleScore = 0;
                $.each($rows, function () {
                    $totalPossibleScore += $highestScore;
                    var $itemScore = parseInt($(this).find(".check").attr("data-rateScore"));
                    console.log($itemScore);
                    if (isNaN($itemScore)) {
                        $itemScore = 0;
                    }
                    $totalItemScores += $itemScore;
                });
                var $sectionScore = (($totalItemScores / $totalPossibleScore) * $obtainableScore).toFixed(1);
                var $sectionPercentageScore = (($sectionScore / $obtainableScore) * $percentageScore).toFixed(1);
                $sectionDiv.find(".totalScore").text($sectionScore);
                $sectionDiv.find(".percentageScore").text($sectionPercentageScore);
            });

            // ratings for duties assigned
            $("table").on("click", "td.duties-assigned", function () {
                var $this = $(this);
                $this.closest("tr").find(".check").removeClass("check");
                $this.addClass("check");
                var $sectionDiv = $this.closest(".section-item");
                var $obtainableScore = parseInt($sectionDiv.attr("data-obtainableScore"));
                var $percentageScore = parseInt($sectionDiv.find(".score-section .percentageObtainable").text().replace(" %", ""));
                var $highestScore = parseInt($("#highestRating").text());
                var $table = $this.closest("table");
                var $rows = $table.find(".task-row");
                var $totalItemScores = 0;
                var $totalPossibleScore = 0;
                $.each($rows, function () {
                    $totalPossibleScore += $highestScore;
                    var $itemScore = parseInt($(this).find(".check").attr("data-rateScore"));
                    console.log($itemScore);
                    if (isNaN($itemScore)) {
                        $itemScore = 0;
                    }
                    $totalItemScores += $itemScore;
                });
                var $sectionScore = (($totalItemScores / $totalPossibleScore) * $obtainableScore).toFixed(1);
                var $sectionPercentageScore = (($sectionScore / $obtainableScore) * $percentageScore).toFixed(1);
                $sectionDiv.find(".totalScore").text($sectionScore);
                $sectionDiv.find(".percentageScore").text($sectionPercentageScore);
            });

            // ratings for quantitative
            $("table").on("blur", "td .enter-score", function () {
                var $this = $(this);
                var $score = $this.val();
                var $itemMaxScore = parseInt($this.closest("tr").find(".max-score").text());
                if (isNaN($score)) {
                    Swal.fire("Error!", "Only number values are allowed.", "error");
                    return;
                }
                if ($score > $itemMaxScore) {
                    Swal.fire("Error!", "Score cannot be greater than the max score allowed", "error");
                    $this.val(0);
                }
                var $sectionDiv = $this.closest(".section-item");
                var $obtainableScore = parseInt($sectionDiv.attr("data-obtainableScore"));
                var $percentageScore = parseInt($sectionDiv.find(".score-section .percentageObtainable").text().replace(" %", ""));
                var $maxScore = parseInt($this.closest("tr").find(".max-score").text());
                var $table = $this.closest("table");
                var $rows = $table.find(".quantitative-values");
                var $totalItemScores = 0;
                var $totalPossibleScore = 0;
                $.each($rows, function () {
                    var max = parseInt($(this).find(".max-score").text());
                    $totalPossibleScore += max;
                    var $itemScore = parseInt($(this).find(".enter-score").val());
                    if (isNaN($itemScore)) {
                        $itemScore = 0;
                    }
                    $totalItemScores += $itemScore;
                });
                var $sectionScore = (($totalItemScores / $totalPossibleScore) * $obtainableScore).toFixed(1);
                var $sectionPercentageScore = (($sectionScore / $obtainableScore) * $percentageScore).toFixed(1);
                $sectionDiv.find(".totalScore").text($sectionScore);
                $sectionDiv.find(".percentageScore").text($sectionPercentageScore);
            });

            // scoring for quantitativ section
            $("table").on("blur", "td .breakdown-score", function () {
                var $this = $(this);
                var $score = $this.val();
                var $totalScore = 0;
                var $maxScore = parseInt($this.closest("div").find(".breakdown-max-score").text());
                if (isNaN($score)) {
                    $score = 0;
                }
                if ($score > $maxScore) {
                    Swal.fire("Error!", "Score cannot be greater than the max score specified!", "error");
                    $this.val(0);
                }
                $breakdownScores = $this.closest("ul").find(".breakdown-score");
                $.each($breakdownScores, function () {
                    var score = parseFloat($(this).val());
                    if (isNaN(score)) {
                        score = 0;
                    }
                    $totalScore += score;
                });
                $this.closest("tr").find(".enter-score").text($totalScore);

                // for percentage calculations
                var $sectionDiv = $this.closest(".section-item");
                var $obtainableScore = parseInt($sectionDiv.attr("data-obtainableScore"));
                var $percentageScore = parseInt($sectionDiv.find(".score-section .percentageObtainable").text().replace(" %", ""));

                var $table = $this.closest("table");
                var $rows = $table.find(".quantitative-values");
                var $totalItemScores = 0;
                var $totalPossibleScore = 0;
                $.each($rows, function () {
                    var max = parseInt($(this).find(".max-score").text());
                    $totalPossibleScore += max;
                    var $itemScore = parseInt($(this).find(".enter-score").text());
                    if (isNaN($itemScore)) {
                        $itemScore = 0;
                    }
                    $totalItemScores += $itemScore;
                });
                var $sectionScore = (($totalItemScores / $totalPossibleScore) * $obtainableScore).toFixed(1);
                var $sectionPercentageScore = (($sectionScore / $obtainableScore) * $percentageScore).toFixed(1);
                $sectionDiv.find(".totalScore").text($sectionScore);
                $sectionDiv.find(".percentageScore").text($sectionPercentageScore);
            })

            // submit appraisal
            $("#submitAppraisal").on("click", function () {
                var $this = $(this);
                var $sections = $(".section-item");
                var $appraiseeId = parseInt($("#appraiseeId").text());
                var $ratingsValid = true;
                var $quantitativeValid = true;
                var $resultAchievedValid = true;
                var $bdsTrackerValid = true;
                var $breakdownValid = true;
                var $sectionResults = [];

                var $isTrackerIncluded = $("#includeTracker").text();
                var trackerObject = {};
                var $trackerDiv = $("#trackerSection");
                if ($isTrackerIncluded == "True") {
                    var $annualTarget = parseInt($trackerDiv.find(".annual-target").val());
                    var $expectedRsa = parseInt($trackerDiv.find(".expected-rsa").val());
                    var $rsaAchieved = parseInt($trackerDiv.find(".rsa-achieved").val());
                    var $fundedPins = parseInt($trackerDiv.find(".funded-pins").val());
                    var $preFundedPins = parseInt($trackerDiv.find(".pre-funded-pins").val());
                    var $cashVolume = parseFloat($trackerDiv.find(".cash-volume").val());
                    var $unfundedAccounts = parseInt($trackerDiv.find(".unfunded-accounts").val());
                    var $rsaAchievedPercentage = $("#trackerScore").find(".rsa-achieved-percentage");
                    var $fundingAchievedPercentage = $("#trackerScore").find(".funding-achieved-percentage");

                    var $rsaAchievedScore = ($rsaAchieved / $annualTarget) * 100;
                    var $fundingAchievedScore = (($fundedPins / $rsaAchieved) * 100) + (($preFundedPins / $unfundedAccounts) * 100);
                    $rsaAchievedPercentage.text($rsaAchievedScore.toFixed(1) + "%");
                    $fundingAchievedPercentage.text($fundingAchievedScore.toFixed(1) + "%");
                    trackerObject = {
                        annualTarget: $annualTarget,
                        expectedRsa: $expectedRsa,
                        rsaAchieved: $rsaAchieved,
                        fundedPins: $fundedPins,
                        preFundedPins: $preFundedPins,
                        cashVolume: $cashVolume,
                        unfundedAccounts: $unfundedAccounts,
                        rsaAchievedPercentage: $rsaAchievedScore.toFixed(1),
                        fundingAchievedPercentage: $fundingAchievedScore.toFixed(1)
                    }
                    if (isNaN($annualTarget) || $annualTarget == '' ||
                        isNaN($expectedRsa) || $expectedRsa == '' ||
                        isNaN($rsaAchieved) || $rsaAchieved == '' ||
                        isNaN($fundedPins) || $fundedPins == '' ||
                        isNaN($preFundedPins) || $preFundedPins == '' ||
                        isNaN($cashVolume) || $cashVolume == '' ||
                        isNaN($unfundedAccounts) || $unfundedAccounts == '') {
                        $bdsTrackerValid = false;
                    }
                }


                $.each($sections, function () {
                    var $sectionTypeId = parseInt($(this).attr("data-sectionTypeId"));
                    var $sectionId = parseInt($(this).attr("data-sectionId"));
                    var $isOptionalSection = $(this).attr("data-optionalSection");
                    var $sectionTotalScore = parseFloat($(this).find(".score-section .totalScore").text());
                    var $sectionPercentageScore = parseFloat($(this).find(".score-section .percentageScore").text().replace(" %", ""));
                    var $isSectionFilled = $(this).find(".sectionFilled").text();
                    var $sectionDetailsArray = [];
                    var $validateSection = true;
                    if ($isOptionalSection == "True") {
                        if ($isSectionFilled == "True") {
                            $validateSection = true;
                        } else {
                            $validateSection = false;
                        }
                    }

                    if ($sectionTypeId == 1 || $sectionTypeId == 2 || $sectionTypeId == 4) {
                        var $rows = $(this).find("table tbody tr.task-row");
                        $.each($rows, function () {
                            var $sectionDetailId = parseInt($(this).attr("data-sectionResultDetailId"));
                            var $score = parseInt($(this).find(".check").attr("data-rateScore"));
                            var $resultAchieved = $(this).find(".resultAchieved").val();

                            if ($validateSection) {
                                if ($sectionTypeId == 2) {
                                    if ($resultAchieved == '') {
                                        $resultAchievedValid = false;
                                    }
                                }
                            }
                            if ($validateSection) {
                                if ($score == null || isNaN($score)) {
                                    $ratingsValid = false;
                                }
                            }
                            var obj = {
                                sectionResultDetailId: $sectionDetailId,
                                score: isNaN($score) ? 0 : $score,
                                resultAchieved: $resultAchieved
                            }
                            $sectionDetailsArray.push(obj);
                        })
                    }
                    else if ($sectionTypeId == 3) {
                        var $rows = $(this).find("table tbody tr.quantitative-values");
                        var $breakdownValueBy = $(this).find('.breakdown-value').text();
                        console.log($breakdownValueBy);
                        var $quatitativeFilledBy = $breakdownValueBy;
                        $.each($rows, function () {
                            var $sectionDetailId = parseInt($(this).attr("data-sectionResultDetailId"));
                            var $breakdownTotalScore = parseFloat($(this).find(".enter-score").text());

                            //
                            var $breakdowns = $(this).find("input.input-breakdown");
                            var $breakdownArray = [];
                            $.each($breakdowns, function () {
                                var $breakdownValue = $(this).val();
                                var $text = $(this).closest("li").find(".breakdown-title").text();
                                var $score = parseFloat($(this).closest("li").find(".breakdown-score").val());
                                var $isScore = $(this).closest("li").attr("data-isScore");
                                var $expectedValueType = $(this).closest("li").attr("data-expectedValue");

                                if ($isScore == 'True') {
                                    if (isNaN($score)) {
                                        $breakdownValid = false;
                                    }
                                }
                                var $breakdownId = parseInt($(this).attr("data-breakdownId"));
                                var obj = {
                                    breakdownValue: $breakdownValue,
                                    breakdownText: $text,
                                    breakdownId: $breakdownId,
                                    score: $score
                                }
                                $breakdownArray.push(obj);
                                if ($validateSection) {
                                    // if expected value type is not equal to "no value" i.e type 3, then check for validation
                                    if ($expectedValueType != 3) {
                                        if (isNaN($breakdownValue)) {
                                            $quantitativeValid = false;
                                        }
                                    }
                                }
                            });
                            //

                            if ($validateSection) {
                                if (isNaN($breakdownTotalScore)) {
                                    $ratingsValid = false;
                                }
                            }
                            var obj = {
                                sectionResultDetailId: $sectionDetailId,
                                score: isNaN($breakdownTotalScore) ? 0 : $breakdownTotalScore,
                                breakdowns: $breakdownArray
                            }
                            $sectionDetailsArray.push(obj);
                        });
                    }
                    var sectionResult = {
                        sectionResultId: $sectionId,
                        sectionTotalScore: isNaN($sectionTotalScore) ? 0 : $sectionTotalScore,
                        sectionPercentageScore: isNaN($sectionPercentageScore) ? 0 : $sectionPercentageScore,
                        sectionDetailsScore: $sectionDetailsArray,
                        sectionTypeId: $sectionTypeId
                    };
                    $sectionResults.push(sectionResult);
                });

                if (!$quantitativeValid) {
                    Swal.fire("Error!", "One or more empty fields detected in the quantitave section.", "error");
                    return;
                }
                if (!$ratingsValid) {
                    Swal.fire("Error!", "One or more items have not been rated.", "error");
                    return;
                }
                if (!$resultAchievedValid || !$bdsTrackerValid) {
                    Swal.fire("Error!", "One or more empty fields detected.", "error");
                    return;
                }
                if (!$breakdownValid) {
                    Swal.fire("Error!", "One or more items of the quantitave section have not been rated.", "error");
                    return;
                }

                console.log('sectionResults', $sectionResults)

                //
                Swal.fire({
                    title: "Are you sure?",
                    text: "Are you sure you want to submit this appraisal?",
                    type: "warning",
                    showCancelButton: !0,
                    customClass: { confirmButton: "btn btn-danger m-1", cancelButton: "btn btn-secondary m-1" },
                    confirmButtonText: "Yes, Submit it!",
                    html: !1,
                    preConfirm: function (e) { return new Promise(function (e) { setTimeout(function () { e() }, 50) }) }

                }).then(function (n) {
                    if (n.value) {
                        //var url = "/api/Appraisal/PostScoreAppraisalSections";
                        var url = '@Url.Action("PostScoreAppraisalSections", "appraisal", new { httproute = "DefaultApi" })';
                        Dashmix.layout('header_loader_on');
                        $this.attr("disabled", true);
                        $.post(url, {
                            appraiseeId: $appraiseeId,
                            sectionScoresResults: $sectionResults,
                            bdsTracker: trackerObject
                        }, function (data) {
                            Dashmix.layout('header_loader_off');
                            $this.attr("disabled", false);
                            Swal.fire({
                                title: "Success",
                                text: "This appraisal has been submitted to the appraisee for his/her review",
                                type: "success",
                                showCancelButton: 0,
                                customClass: { okButton: "btn btn-danger m-1" },
                                html: !1,
                                preConfirm: function (e) { return new Promise(function (e) { setTimeout(function () { e() }, 50) }) }

                            }).then(function (n) {
                                if (n.value) {
                                    //window.location.href = '/appraisal/appraise-members';
                                    window.location.href = '@Url.Action("appraise-members","appraisal")';
                                }
                            });
                        });
                    }
                    else {
                        "cancel" === n.dismiss && Swal.fire("Cancelled", "Submission cancelled", "error")
                    }
                });
            });

            //
            $("#rejectAppraisal").on("click", function () {
                $("#rejection-div").show();
            });
            $("#cancelReject").on("click", function () {
                $("#rejection-div").hide();
            });

            // when you click on submit reject
            $("#submitReject").on("click", function () {
                var $this = $(this);
                var $appraiseeId = parseInt($("#appraiseeId").text());
                var $rejectionReason = $("#rejectionReasonText").val();
                //check if rejection reason text is not empty
                if ($rejectionReason == '') {
                    Swal.fire("Error!", "You need to enter a rejection reason!", "error");
                    return;
                }

                Dashmix.layout('header_loader_on');
                $this.attr("disabled", true);
                //var url = "/api/Appraisal/PostRejectAppraisalToAppraisee";
                var url = '@Url.Action("PostRejectAppraisalToAppraisee", "appraisal", new { httproute = "DefaultApi" })';
                $.post(url, {
                    appraiseeId: $appraiseeId,
                    rejectionReason: $rejectionReason
                }, function (data) {
                        Dashmix.layout('header_loader_off');
                        $this.attr("disabled", false);
                    Swal.fire({
                        title: "Success",
                        text: "This appraisal has been retured back to the appraisee with the rejection reason specified",
                        type: "success",
                        showCancelButton: 0,
                        customClass: { okButton: "btn btn-danger m-1" },
                        html: !1,
                        preConfirm: function (e) { return new Promise(function (e) { setTimeout(function () { e() }, 50) }) }

                    }).then(function (n) {
                        if (n.value) {
                            //window.location.href = '/appraisal/appraise-members';
                            window.location.href = '@Url.Action("appraise-members","appraisal")';
                        }
                    });
                });
            });

            // when you click on calculate score
            $("#calculateScore").on("click", function () {
                var $scoreDiv = $("#scoreDiv");
                $scoreDiv.show();
                var $sectionScoreTable = $("#sectionScoreTable");
                var $sections = $(".section-item");
                var $ratingsValid = true;
                var $quantitativeValid = true;
                var $resultAchievedValid = true;
                var $bdsTrackerValid = true;
                var $sectionResults = [];
                var $finalScore = 0;

                var $isTrackerIncluded = $("#includeTracker").text();
                var trackerObject = {};
                var $trackerDiv = $("#trackerSection");
                if ($isTrackerIncluded == "True") {
                    var $annualTarget = $trackerDiv.find(".annual-target").val();
                    var $expectedRsa = $trackerDiv.find(".expected-rsa").val();
                    var $rsaAchieved = $trackerDiv.find(".rsa-achieved").val();
                    var $fundedPins = $trackerDiv.find(".funded-pins").val();
                    var $preFundedPins = $trackerDiv.find(".pre-funded-pins").val();
                    var $cashVolume = $trackerDiv.find(".cash-volume").val();
                    var $unfundedAccounts = $trackerDiv.find(".unfunded-accounts").val();
                    var $rsaAchievedPercentage = $("#trackerScore").find(".rsa-achieved-percentage");
                    var $fundingAchievedPercentage = $("#trackerScore").find(".funding-achieved-percentage");

                    trackerObject = {
                        annualTarget: parseInt($annualTarget),
                        expectedRsa: parseInt($expectedRsa),
                        rsaAchieved: parseInt($rsaAchieved),
                        fundedPins: parseInt($fundedPins),
                        preFundedPins: parseInt($preFundedPins),
                        cashVolume: parseFloat($cashVolume),
                        unfundedAccounts: parseInt($unfundedAccounts)
                    }
                    if (isNaN($annualTarget) || $annualTarget == '' ||
                        isNaN($expectedRsa) || $expectedRsa == '' ||
                        isNaN($rsaAchieved) || $rsaAchieved == '' ||
                        isNaN($fundedPins) || $fundedPins == '' ||
                        isNaN($preFundedPins) || $preFundedPins == '' ||
                        isNaN($cashVolume) || $cashVolume == '' ||
                        isNaN($unfundedAccounts) || $unfundedAccounts == '') {
                        $bdsTrackerValid = false;
                    }
                    var $rsaAchievedScore = (trackerObject.rsaAchieved / trackerObject.annualTarget) * 100;
                    var $fundingAchievedScore = ((trackerObject.fundedPins / trackerObject.rsaAchieved) * 100) + ((trackerObject.preFundedPins / trackerObject.unfundedAccounts) * 100);
                    $rsaAchievedPercentage.text($rsaAchievedScore.toFixed(1) + "%");
                    $fundingAchievedPercentage.text($fundingAchievedScore.toFixed(1) + "%");
                }

                $sectionScoreTable.find("tbody tr:not('tr:first')").remove();

                $.each($sections, function () {
                    var $sectionTypeId = parseInt($(this).attr("data-sectionTypeId"));
                    var $sectionId = parseInt($(this).attr("data-sectionId"));
                    var $isOptionalSection = $(this).attr("data-optionalSection");
                    var $sectionSetupId = $(this).attr("data-sectionSetupId");

                    var $sectionTotalScore = parseFloat($(this).find(".score-section .totalScore").text());
                    var $sectionPercentageScore = parseFloat($(this).find(".score-section .percentageScore").text().replace(" %", ""));
                    $sectionPercentageScore = isNaN($sectionPercentageScore) ? 0 : $sectionPercentageScore;
                    var $sectionPercentageObtainable = parseFloat($(this).find(".score-section .percentageObtainable").text().replace(" %", ""));
                    var $isSectionFilled = $(this).find(".sectionFilled").text();
                    var $sectionDetailsArray = [];
                    var $validateSection = true;
                    if ($isOptionalSection == "True") {
                        if ($isSectionFilled == "True") {
                            $validateSection = true;
                        } else {
                            $validateSection = false;
                        }
                    }

                    if ($sectionTypeId == 1 || $sectionTypeId == 2 || $sectionTypeId == 4) {
                        var $rows = $(this).find("table tbody tr.task-row");
                        $.each($rows, function () {
                            var $sectionDetailId = parseInt($(this).attr("data-sectionResultDetailId"));
                            var $score = parseInt($(this).find(".check").attr("data-rateScore"));
                            var $resultAchieved = $(this).find(".resultAchieved").val();

                            if ($validateSection) {
                                if ($sectionTypeId == 2) {
                                    if ($resultAchieved == '') {
                                        $resultAchievedValid = false;
                                    }
                                }
                            }
                            if ($validateSection) {
                                if ($score == null || isNaN($score)) {
                                    $ratingsValid = false;
                                }
                            }
                            var obj = {
                                sectionResultDetailId: $sectionDetailId,
                                score: isNaN($score) ? 0 : $score,
                                resultAchieved: $resultAchieved
                            }
                            $sectionDetailsArray.push(obj);
                        })
                    }
                    else if ($sectionTypeId == 3) {
                        var $rows = $(this).find("table tbody tr.quantitative-values");
                        var $breakdownValueBy = $(this).find('.breakdown-value').text();
                        console.log($breakdownValueBy);
                        var $quatitativeFilledBy = $breakdownValueBy;
                        $.each($rows, function () {
                            var $sectionDetailId = parseInt($(this).attr("data-sectionResultDetailId"));
                            var $score = parseInt($(this).find(".enter-score").text());

                            // test start
                            var $breakdowns = $(this).find("input.input-breakdown");
                            var $breakdownArray = [];
                            $.each($breakdowns, function () {
                                var $breakdownValue = parseInt($(this).val());
                                var $text = $(this).closest("li").find(".breakdown-title").text();
                                var $breakdownId = parseInt($(this).attr("data-breakdownId"));
                                var $expectedValueType = $(this).closest("li").attr("data-expectedValue");
                                var obj = {
                                    breakdownValue: $breakdownValue,
                                    breakdownText: $text,
                                    breakdownId: $breakdownId
                                }
                                $breakdownArray.push(obj);
                                if ($validateSection) {
                                    if ($expectedValueType != 3) {
                                        if (isNaN($breakdownValue)) {
                                            $quantitativeValid = false;
                                        }
                                    }
                                }
                            });
                            // test end

                            if ($validateSection) {
                                if ($score == null || isNaN($score)) {
                                    $ratingsValid = false;
                                }
                            }
                            var obj = {
                                sectionResultDetailId: $sectionDetailId,
                                score: isNaN($score) ? 0 : $score,
                                breakdowns: $breakdownArray
                            }
                            $sectionDetailsArray.push(obj);
                        });
                    }
                    var sectionResult = {
                        sectionResultId: $sectionId,
                        sectionTotalScore: $sectionTotalScore,
                        sectionPercentageScore: $sectionPercentageScore,
                        sectionDetailsScore: $sectionDetailsArray,
                        sectionTypeId: $sectionTypeId
                    };
                    $sectionResults.push(sectionResult);

                    var $tr = $sectionScoreTable.find("tbody tr:first").clone();
                    $tr.find(".section-name").text("Section " + $sectionSetupId);
                    $tr.find(".section-percentage").text($sectionPercentageObtainable);
                    $tr.find(".section-score").text($sectionPercentageScore + " %");
                    $tr.show();
                    $sectionScoreTable.find("tbody").append($tr);
                    $finalScore += $sectionPercentageScore;
                });

                if (!$quantitativeValid) {
                    Swal.fire("Error!", "One or more empty fields detected in the quantitave section.", "error");
                    return;
                }
                if (!$ratingsValid) {
                    Swal.fire("Error!", "One or more items have not been rated.", "error");
                    return;
                }
                if (!$resultAchievedValid || !$bdsTrackerValid) {
                    Swal.fire("Error!", "One or more empty fields detected.", "error");
                    return;
                }
                $scoreDiv.find(".finalScore").text($finalScore + "%");
            });
        });
    </script>
}
